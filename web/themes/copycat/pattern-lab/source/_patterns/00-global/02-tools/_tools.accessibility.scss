// @file
// Accessibility mixins

// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
// @param {boolean} $important Enable important
@mixin visually-hidden($important: false) {
  clip: rect(1px, 1px, 1px, 1px) iff($important, !important);
  height: 1px iff($important, !important);
  overflow: hidden iff($important, !important);
  position: absolute iff($important, !important);
  width: 1px iff($important, !important);
  word-wrap: normal iff($important, !important);
}

// Turns off the visually-hidden effect.
// @param {boolean} $important Enable important
@mixin visually-hidden-off($important: false) {
  clip: auto iff($important, !important);
  height: auto iff($important, !important);
  overflow: visible iff($important, !important);
  position: static iff($important, !important);
  width: auto iff($important, !important);
}

// Makes an element visible when focused if it also has the visually-hidden styles.
// @param {boolean} $important Enable important
@mixin focusable($important: false) {
  &:active,
  &:focus {
    @include visually-hidden-off($important);
  }
}

// Makes an element completely hidden, visually and to screen readers.
// @param {boolean} $important Enable important
@mixin hidden($important: false) {
  display: none iff($important, !important);
}

// Makes an element completely hidden, visually and to screen readers, but
// maintains its layout.
// @param {boolean} $important Enable important
@mixin invisible($important: false) {
  visibility: hidden iff($important, !important);
}
